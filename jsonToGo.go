package golang_structs_parser

import (
	"encoding/json"
	"fmt"
	"log"
	"sort"

	"github.com/iancoleman/strcase"
)

// Parsed structures
var structStrings []string

func ParseJsonToGo(structName, jsonString string) {
	// fmt.Println(jsonString)
	var parsedJson map[string]interface{}
	err := json.Unmarshal([]byte(jsonString), &parsedJson)
	if err != nil {
		log.Fatal(err)
	}
	parsedStruct := inlineParseStruct(parsedJson)
	fmt.Println(`type AutoGenerated `, parsedStruct)
}

func inlineParseStruct(newStruct map[string]interface{}) string {
	// Struct fields
	fields := ""
	keys := make([]string, 0)
	for k, _ := range newStruct {
		keys = append(keys, k)
	}
	sort.Strings(keys)

	// Look for new struct to parse inside current struct
	for _, key := range keys {
		dataType := typeAssertion(newStruct[key])
		if dataType == "struct" {
			// Datatype is struct
			innerStruct := newStruct[key].(map[string]interface{})
			dataType = inlineParseStruct(innerStruct)
		} else if dataType == "[]" {
			// Detected structure array, assert array inner type
			parsedArray := newStruct[key].([]interface{})
			if len(parsedArray) > 0 {
				dataType = typeAssertion(parsedArray[0])
				if dataType == "struct" {
					// Datatype is struct
					innerStruct := parsedArray[0].(map[string]interface{})
					dataType = inlineParseStruct(innerStruct)
					dataType = "[]" + dataType
				} else {
					dataType = "[]" + dataType
				}
			} else {
				dataType = "[]string"
			}
		}
		fields = fields + `	` + strcase.ToCamel(key) + " " + dataType + " `json:\"" + key + "\"` \n"
	}
	parsedStruct := " struct { \n" + fields + `}`
	return parsedStruct
}
